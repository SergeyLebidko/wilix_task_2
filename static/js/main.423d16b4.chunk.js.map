{"version":3,"sources":["components/Card/Card.js","constants/settings.js","components/Board/Board.js","utils.js","components/SizeForm/SizeForm.js","components/App/App.js","index.js"],"names":["Card","size","id","content","hasOpen","cardClickHandler","getCardInline","useCallback","base","Math","floor","width","height","fontSize","className","style","onClick","Board","sizeReset","useState","field","setField","timerValue","setTimerValue","timer","useRef","selected","useEffect","result","numbers","number","push","row","col","length","splice","random","createFieldData","current","setInterval","oldValue","hasEndGame","clearInterval","every","data","setCardsOpenFlag","ids","flag","oldData","map","includes","getContentForId","find","getHasOpenForId","firstSelect","secondSelect","gridTemplateColumns","cardData","SizeForm","setSize","inputRef","value","focus","htmlFor","ref","e","preventDefault","isNaN","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.423d16b4.chunk.js","sourcesContent":["import React, {useCallback} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {FIELD_BASE} from \"../../constants/settings\";\nimport \"./Card.scss\";\n\nfunction Card({size, id, content, hasOpen, cardClickHandler}) {\n    const getCardInline = useCallback(() => {\n        const base = Math.floor(FIELD_BASE / size);\n        return {\n            width: `${base}vmin`,\n            height: `${base}vmin`,\n            fontSize: `${(base - 3) < 2 ? 2 : (base - 3)}vmin`\n        };\n    }, [size]);\n\n    return (\n        <div className=\"card\" style={getCardInline()} onClick={() => cardClickHandler(id)}>\n            {hasOpen && content}\n        </div>\n    );\n}\n\nCard.propTypes = {\n    size: PropTypes.number,\n    id: PropTypes.string,\n    content: PropTypes.number,\n    hasOpen: PropTypes.bool,\n    cardClickHandler: PropTypes.func\n}\n\nexport default Card;","// Количество карточек по вертикали и горизонтали по-умолчанию\nexport const DEFAULT_SIZE = 4;\n\n// Время отведенное на одну игру\nexport const TIMER_START_VALUE = 60;\n\n// Базовый размер игрового поля на экране в vmin (суммарная ширина/высота ячеек без учета интервалов между ними)\nexport const FIELD_BASE = 70;","import React, {useEffect, useRef, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card from \"../Card/Card\";\nimport {createFieldData} from \"../../utils\";\nimport {TIMER_START_VALUE} from \"../../constants/settings\";\nimport \"./Board.scss\";\n\nfunction Board({size, sizeReset}) {\n    const [field, setField] = useState([]);\n    const [timerValue, setTimerValue] = useState(TIMER_START_VALUE);\n\n    const timer = useRef(null);\n    const selected = useRef([]);\n\n    // Пр старте новой игры заполняем карточки числами и запускаем обратный отсчет\n    useEffect(() => {\n        setField(createFieldData(size));\n        timer.current = setInterval(() => setTimerValue(oldValue => oldValue - 1), 1000);\n    }, [size]);\n\n    // Если время вышло или все карты открыты - останавливаем таймер\n    useEffect(() => {\n        if (hasEndGame()) {\n            clearInterval(timer.current);\n        }\n    }, [timerValue, field]);\n\n    const hasEndGame = () => field.every(data => data.hasOpen) && field.length > 0 || timerValue === 0;\n\n    const setCardsOpenFlag = (ids, flag) => {\n        setField(oldData => oldData.map(data => ids.includes(data.id) ? {...data, hasOpen: flag} : {...data}));\n    }\n\n    const getContentForId = id => field.find(data => data.id === id).content;\n\n    const getHasOpenForId = id => field.find(data => data.id === id).hasOpen;\n\n    const getMessage = () => {\n        if (hasEndGame()) {\n            if (timerValue === 0) {\n                return 'Время истекло...';\n            } else {\n                return `Вы справились за ${TIMER_START_VALUE - timerValue} сек!`;\n            }\n        } else {\n            return `Осталось: ${timerValue} сек.`;\n        }\n    }\n\n    const cardClickHandler = id => {\n        // Запрещаем клики по карточкам после того, как игра завершена\n        if (hasEndGame()) return;\n\n        // Запрещаем клики по уже открытым карточкам\n        if (getHasOpenForId(id)) return;\n\n        selected.current.push(id);\n        if (selected.current.length === 3) {\n            const firstSelect = selected.current[0];\n            const secondSelect = selected.current[1];\n\n            // Если две ранее открытые карточки содержат разные числа - закрываем их\n            if (getContentForId(firstSelect) !== getContentForId(secondSelect)) {\n                setCardsOpenFlag([firstSelect, secondSelect], false);\n            }\n\n            selected.current = [selected.current[2]];\n        }\n        setCardsOpenFlag(selected.current, true);\n    }\n\n    return (\n        <div className=\"board\">\n            <h1 className=\"board__title\">Pair game</h1>\n            <h3 className=\"board__message\">{getMessage()}</h3>\n            <div className=\"board__field\" style={{gridTemplateColumns: `repeat(${size}, 1fr)`}}>\n                {field.length > 0 &&\n                field.map(cardData =>\n                    <Card\n                        key={cardData.id}\n                        size={size}\n                        {...cardData}\n                        cardClickHandler={cardClickHandler}\n                    />\n                )}\n            </div>\n            {hasEndGame() && <button className=\"button\" onClick={sizeReset}>Сыграть еще раз</button>}\n        </div>\n    );\n}\n\nBoard.propTypes = {\n    size: PropTypes.number,\n    sizeReset: PropTypes.func\n}\n\nexport default Board;","export function createFieldData(size) {\n    const result = [];\n    const numbers = [];\n\n    for (let number = 1; number <= ((size ** 2) / 2); number++) {\n        numbers.push(number, number);\n    }\n\n    let content;\n    for (let row = 0; row < size; row++) {\n        for (let col = 0; col < size; col++) {\n            if (numbers.length === 1) {\n                content = numbers[0];\n            } else {\n                content = numbers.splice(Math.floor(Math.random() * numbers.length), 1)[0];\n            }\n            result.push({\n                id: `${row}:${col}`,\n                content,\n                hasOpen: false\n            });\n        }\n    }\n\n    return result;\n}","import React, {useEffect, useRef} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {DEFAULT_SIZE} from \"../../constants/settings\";\nimport \"./SizeForm.scss\";\n\nfunction SizeForm({setSize}) {\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.value = DEFAULT_SIZE;\n        inputRef.current.focus();\n    }, []);\n\n    const startHandler = e => {\n        e.preventDefault();\n        const size = +inputRef.current.value;\n        if (isNaN(size) || (size % 2) !== 0 || size < 2 || size > 10) {\n            inputRef.current.value = DEFAULT_SIZE;\n            return;\n        }\n        setSize(size);\n    }\n\n    return (\n        <div className=\"size_form\">\n            <form className=\"size_form__form_block\">\n                <label className=\"size_form__label\" htmlFor=\"size_input\">\n                    Количество карточек по вертикали и горизонтали:\n                </label>\n                <input className=\"size_form__size_input\" ref={inputRef} id=\"size_input\"/>\n                <p className=\"size_form__warning_text\">\n                    Обратите внимание: в поле можно ввести только чётное число от 2 до 10.\n                    Если значение некорректное (то есть нечётное или не в пределах 2-10),\n                    то будет установлено количество карточек по-умолчанию ({DEFAULT_SIZE}).\n                </p>\n                <button className=\"button\" onClick={startHandler}>Начать игру</button>\n            </form>\n        </div>\n    );\n}\n\nSizeForm.propTypes = {\n    setSize: PropTypes.func\n}\n\nexport default SizeForm;","import React, {useState} from \"react\";\nimport Board from \"../Board/Board\";\nimport SizeForm from \"../SizeForm/SizeForm\";\n\nfunction App() {\n    const [size, setSize] = useState(null);\n    const sizeReset = () => setSize(null);\n    return size ? <Board size={size} sizeReset={sizeReset}/> : <SizeForm setSize={setSize}/>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './styles/init.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}